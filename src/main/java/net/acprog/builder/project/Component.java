package net.acprog.builder.project;

import java.util.HashMap;
import java.util.Map;

import net.acprog.builder.components.ConfigurationException;
import net.acprog.builder.utils.XmlUtils;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

/**
 * Configuration of a component.
 */
public class Component {

    // ---------------------------------------------------------------------------
    // Instance variables
    // ---------------------------------------------------------------------------

    /**
     * Name of the component.
     */
    private String name;

    /**
     * Type of the component.
     */
    private String type;

    /**
     * Description of the component.
     */
    private String description;

    /**
     * Setting of component properties.
     */
    private final Map<String, String> properties = new HashMap<String, String>();

    /**
     * Setting of component events.
     */
    private final Map<String, String> events = new HashMap<String, String>();

    /**
     * Properties generated during compilation process.
     */
    private final Map<String, String> autogeneratedProperties = new HashMap<String, String>();

    // ---------------------------------------------------------------------------
    // Setters and getters
    // ---------------------------------------------------------------------------

    public Map<String, String> getProperties() {
        return properties;
    }

    public Map<String, String> getEvents() {
        return events;
    }

    public Map<String, String> getAutogeneratedProperties() {
        return autogeneratedProperties;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        if ((name == null) || (name.trim().isEmpty())) {
            throw new ConfigurationException("Component name cannot be null or an empty string.");
        }

        this.name = name.trim();
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        if ((type == null) || (type.trim().isEmpty())) {
            throw new ConfigurationException("Component type cannot be null or an empty string.");
        }

        this.type = type.trim();
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    // ---------------------------------------------------------------------------
    // XML parsing and validation
    // ---------------------------------------------------------------------------

    /**
     * Reads configuration of a component from an xml element.
     *
     * @param xmlElement the xml element.
     */
    public void readFromXml(Element xmlElement) {
        try {
            // Read name
            name = "";
            setName(XmlUtils.getSimplePropertyValue(xmlElement, "name", "").trim());

            // Read type
            setType(XmlUtils.getSimplePropertyValue(xmlElement, "type", "").trim());

            // Read desc
            setDescription(XmlUtils.getSimplePropertyValue(xmlElement, "description", "").trim());

            // Read properties
            properties.clear();
            Element xmlProperties = XmlUtils.getChildElement(xmlElement, "properties");
            if (xmlProperties != null) {
                for (Element xmlProperty : XmlUtils.getChildElements(xmlProperties, "property")) {
                    String propertyName = xmlProperty.getAttribute("name").trim();
                    String propertyValue = xmlProperty.getTextContent();

                    if (propertyName.isEmpty()) {
                        throw new ConfigurationException(
                                "Each property assignment must define property name using the attribute \"name\".");
                    }

                    if (properties.containsKey(propertyName)) {
                        throw new ConfigurationException("Duplicated assignment of value to the property "
                                + propertyName + ".");
                    }

                    properties.put(propertyName, propertyValue);
                }
            }

            // Read events
            events.clear();
            Element xmlEvents = XmlUtils.getChildElement(xmlElement, "events");
            if (xmlEvents != null) {
                for (Element xmlEvent : XmlUtils.getChildElements(xmlEvents, "event")) {
                    String eventName = xmlEvent.getAttribute("name").trim();
                    String eventValue = xmlEvent.getTextContent();

                    if (eventName.isEmpty()) {
                        throw new ConfigurationException(
                                "Each event assignment must define event name using the attribute \"name\".");
                    }

                    if (events.containsKey(eventName)) {
                        throw new ConfigurationException("Duplicated assignment of value to the event " + eventName
                                + ".");
                    }

                    events.put(eventName, eventValue);
                }
            }
        } catch (ConfigurationException e) {
            throw new ConfigurationException("Configuration of component " + name + " contains errors.", e);
        }
    }

    public void writeToXml(Element xmlComponent) {
        Document doc = xmlComponent.getOwnerDocument();

        Element xmlName = doc.createElement("name");
        xmlName.setTextContent(getName());
        xmlComponent.appendChild(xmlName);
        Element xmlType = doc.createElement("type");
        xmlType.setTextContent(getType());
        xmlComponent.appendChild(xmlType);
        if (getDescription() != null && getDescription().length() > 0) {
            Element xmlDescription = doc.createElement("description");
            xmlDescription.setTextContent(getDescription());
            xmlComponent.appendChild(xmlDescription);
        }

        Element xmlProperties = writeProperties(doc, doc.createElement("properties"));
        if (xmlProperties != null) {
            xmlComponent.appendChild(xmlProperties);
        }
        Element xmlEvents = writeEvents(doc, doc.createElement("events"));
        if (xmlEvents != null) {
            xmlComponent.appendChild(xmlEvents);
        }
    }

    private Element writeEvents(Document doc, Element xmlEvents) {
        if (getEvents().size() == 0) {
            return null;
        }
        for (Map.Entry<String, String> entry : getEvents().entrySet()) {
            Element xmlEvent = doc.createElement("event");
            xmlEvent.setAttribute("name", entry.getKey());
            xmlEvent.setTextContent(entry.getValue());
            xmlEvents.appendChild(xmlEvent);
        }
        return xmlEvents;
    }

    private Element writeProperties(Document doc, Element xmlProperties) {
        if (getProperties().size() == 0) {
            return null;
        }
        for (Map.Entry<String, String> entry : getProperties().entrySet()) {
            Element xmlProperty = doc.createElement("property");
            xmlProperty.setAttribute("name", entry.getKey());
            xmlProperty.setTextContent(entry.getValue());
            xmlProperties.appendChild(xmlProperty);
        }
        return xmlProperties;
    }

}
